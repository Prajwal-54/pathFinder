{"version":3,"sources":["components/Node.js","components/DNode.js","algorithms/bfs.js","algorithms/dfs.js","algorithms/maze.js","components/Home.js","App.js","index.js"],"names":["Node","_ref","col","row","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","drageStart","drageEnter","drageEnd","sOrf","className","concat","nodeId","react_default","a","createElement","id","e","onDragStart","preventDefault","onDragEnter","onDragEnd","onDragOver","draggable","index_esm","DNode","isVisited","isShortest","isTutorial","isUnvisited","onClick","gi_index_esm","gr_index_esm","updateUnvisitedNeighbors","node","graph","_step3","_iterator3","_createForOfIteratorHelper","neighbors","push","length","filter","neighbor","getUnvisitedNeighbors","s","n","done","value","distance","previousNode","err","f","dfs","start","end","forMaze","path","reached","startDfs","g","array","randomIndex","currentIndex","Math","floor","random","shuffle","_step","_iterator","dfs_createForOfIteratorHelper","getNodesInShortestPathOrderDfs","finishNode","nodesInShortestPathOrder","currentNode","unshift","NO_OF_ROW","NO_OF_COL","getRndInteger","min","max","checkStartOrEnd","r","c","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","SPEEDS","Home","_useState","useState","_useState2","Object","slicedToArray","setGraph","_useState3","_useState4","mousePressed","setmousePressed","_useState5","_useState6","mousePressed2","setmousePressed2","_useState7","_useState8","startSelected","setStartSelected","_useState9","_useState10","endSelected","setEndSelected","_useState11","_useState12","cordinates","setCordinates","_useState13","_useState14","curAlgo","setCurAlgo","_useState15","_useState16","curSpeed","setCurSpeed","_useState17","_useState18","boardText","setBoardText","_useState19","_useState20","animationStarted","setAnimationStarted","visualize","visitedNodesInOrder","shortestpath","speed","shift","_loop2","i","setTimeout","pop","_loop","document","getElementById","animateShortestPath","v","_ret","startBfs","shortestpathInOrder","unvisited","_step2","_iterator2","sort","b","closestNode","Infinity","bfs","startToEnd","getNodesInShortestPathOrder","startAlgo","clearPaths","visitedDiv","getElementsByClassName","shortestDiv","classList","remove","createGraph","toggleWall","gg","slice","newNode","objectSpread","randomWalls","newG","walls","j","t","randWalls","emptyGraph","createMaze","e1","e2","_maze","g1","g2","g3","g4","S_ROW","S_COL","F_ROW","F_COL","allPaths","possibleCordinates","newCordinate","maze","newGraph","pathSet","Set","forEach","add","Array","from","useEffect","position","parseInt","ss","ee","cc","mouse","pressAndHold2","pressAndHold","tutorial","style","display","onChange","target","div","div1","clearGraph","dangerouslySetInnerHTML","__html","map","rowIdx","key","nodeIdx","href","vsc_index_esm","marginTop","createNode","currentRow","cur","App","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.578043cc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../css/node.css\";\r\n// import { GiBrickWall } from \"react-icons/gi\";\r\n\r\nimport { FcLowPriority, FcCollect } from \"react-icons/fc\";\r\n\r\nexport default function Node({\r\n  col,\r\n  row,\r\n  isFinish,\r\n  isStart,\r\n  isWall,\r\n  onMouseDown,\r\n  onMouseEnter,\r\n  onMouseUp,\r\n  drageStart,\r\n  drageEnter,\r\n  drageEnd,\r\n}) {\r\n  const sOrf = isFinish || isStart;\r\n  const startOrFinish = isFinish\r\n    ? \"node-finish\"\r\n    : isStart\r\n    ? \"node-start\"\r\n    : isWall\r\n    ? \"node-wall\"\r\n    : \" \";\r\n  const className = `node ${startOrFinish}`;\r\n  const nodeId = `node-${row}-${col}`;\r\n\r\n  return isWall ? (\r\n    <div\r\n      id={nodeId}\r\n      className={className}\r\n      onMouseDown={(e) => onMouseDown(row, col, e)}\r\n      onMouseEnter={(e) => onMouseEnter(row, col, e)}\r\n      onMouseUp={(e) => onMouseUp(row, col, e)}\r\n      onDragStart={(e) => {\r\n        if (sOrf) {\r\n          drageStart(e, { row, col, isStart, isFinish });\r\n        } else {\r\n          e.preventDefault();\r\n        }\r\n      }}\r\n      onDragEnter={(e) => {\r\n        drageEnter(e, { row, col, isStart, isFinish });\r\n      }}\r\n      onDragEnd={(e) => {\r\n        if (sOrf) {\r\n          drageEnd(e, { row, col, sOrf });\r\n        } else {\r\n          e.preventDefault();\r\n        }\r\n      }}\r\n      onDragOver={(e) => {\r\n        e.preventDefault();\r\n      }}\r\n      draggable\r\n    />\r\n  ) : (\r\n    <div\r\n      id={nodeId}\r\n      className={className}\r\n      onMouseDown={(e) => onMouseDown(row, col, e)}\r\n      onMouseEnter={(e) => onMouseEnter(row, col, e)}\r\n      onMouseUp={(e) => onMouseUp(row, col, e)}\r\n      onDragStart={(e) => {\r\n        if (sOrf) {\r\n          drageStart(e, { row, col, isStart, isFinish });\r\n        } else {\r\n          e.preventDefault();\r\n        }\r\n      }}\r\n      onDragEnter={(e) => {\r\n        drageEnter(e, { row, col, isStart, isFinish });\r\n      }}\r\n      onDragEnd={(e) => {\r\n        if (sOrf) {\r\n          drageEnd(e, { row, col, sOrf });\r\n        } else {\r\n          e.preventDefault();\r\n        }\r\n      }}\r\n      onDragOver={(e) => {\r\n        e.preventDefault();\r\n      }}\r\n      draggable\r\n    >\r\n      {isStart ? (\r\n        <FcLowPriority className=\"startIcon\" />\r\n      ) : isFinish ? (\r\n        <FcCollect className=\"finishIcon\" />\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"../css/dnode.css\";\r\nimport { GiBrickWall } from \"react-icons/gi\";\r\nimport { GrCircleQuestion } from \"react-icons/gr\";\r\nimport { FcLowPriority, FcCollect } from \"react-icons/fc\";\r\nexport default function DNode({\r\n  isFinish,\r\n  isStart,\r\n  isWall,\r\n  isVisited,\r\n  isShortest,\r\n  isUnvisited,\r\n  isTutorial,\r\n  onClick,\r\n}) {\r\n  const className = isStart\r\n    ? \"dnode-start\"\r\n    : isFinish\r\n    ? \"dnode-finish\"\r\n    : isWall\r\n    ? \"dnode-wall\"\r\n    : isVisited\r\n    ? \"dnode-visited\"\r\n    : isShortest\r\n    ? \"dnode-shortest-path\"\r\n    : isTutorial\r\n    ? \"dnode-tutorial\"\r\n    : \" \";\r\n\r\n  return (\r\n    <div className=\"Dnode\">\r\n      {isStart ? (\r\n        <FcLowPriority className={`dnode ${className}`} />\r\n      ) : isFinish ? (\r\n        <FcCollect className={`dnode ${className}`} />\r\n      ) : isWall ? (\r\n        <GiBrickWall className={`dnode ${className}`} />\r\n      ) : isTutorial ? (\r\n        <p className=\"howTo\" onClick={(e) => onClick()}>\r\n          how to\r\n        </p>\r\n      ) : (\r\n        <div className={`dnode ${className}`}></div>\r\n      )}\r\n\r\n      {isTutorial === false ? (\r\n        <div className=\"legendName\">\r\n          {isStart\r\n            ? \"start node\"\r\n            : isFinish\r\n            ? \"finish node\"\r\n            : isWall\r\n            ? \"wall node\"\r\n            : isVisited\r\n            ? \"visited node\"\r\n            : isShortest\r\n            ? \"path node\"\r\n            : \"unvisited node\"}\r\n        </div>\r\n      ) : (\r\n        <GrCircleQuestion\r\n          className={`dnode ${className}`}\r\n          onClick={(e) => onClick()}\r\n        ></GrCircleQuestion>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","export function bfs(graph, start, end) {\r\n  const path = [];\r\n  start.distance = 0;\r\n\r\n  const unvisited = [];\r\n  let reached = false;\r\n\r\n  for (const row of graph) {\r\n    for (const node of row) {\r\n      unvisited.push(node);\r\n    }\r\n  }\r\n  while (!!unvisited.length) {\r\n    sortNodesByDistance(unvisited);\r\n    const closestNode = unvisited.shift();\r\n\r\n    if (closestNode.isWall) continue;\r\n    if (closestNode.distance === Infinity) return { path, reached }; //not reachable\r\n\r\n    closestNode.isVisited = true;\r\n    path.push(closestNode);\r\n    if (closestNode === end) {\r\n      reached = true;\r\n      return { path, reached };\r\n    }\r\n    updateUnvisitedNeighbors(closestNode, graph);\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(nodes) {\r\n  nodes.sort((a, b) => a.distance - b.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, graph) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, graph);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, graph) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n\r\n  if (row > 0) neighbors.push(graph[row - 1][col]);\r\n\r\n  if (col < graph[0].length - 1) neighbors.push(graph[row][col + 1]);\r\n\r\n  if (row < graph.length - 1) neighbors.push(graph[row + 1][col]);\r\n\r\n  if (col > 0) neighbors.push(graph[row][col - 1]);\r\n\r\n  return neighbors.filter((neighbor) => !neighbor.isVisited);\r\n}\r\n\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","export function dfs(graph, start, end, forMaze) {\r\n  var path = [];\r\n  var reached = false;\r\n  reached = startDfs(graph, start, end, path, reached, forMaze);\r\n  // console.log(path);\r\n  return { path, reached };\r\n}\r\nfunction shuffle(array) {\r\n  let currentIndex = array.length,\r\n    randomIndex;\r\n\r\n  // While there remain elements to shuffle.\r\n  while (currentIndex !== 0) {\r\n    // Pick a remaining element.\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex--;\r\n\r\n    // And swap it with the current element.\r\n    [array[currentIndex], array[randomIndex]] = [\r\n      array[randomIndex],\r\n      array[currentIndex],\r\n    ];\r\n  }\r\n\r\n  return array;\r\n}\r\nfunction startDfs(g, s, end, path, reached, forMaze) {\r\n  // console.log(s);\r\n  if (s === end) return true;\r\n  if (s.isWall) return false;\r\n  s.isVisited = true;\r\n  path.push(s);\r\n  const neighbors = getUnvisitedNeighbors(s, g, forMaze);\r\n  for (const n of neighbors) {\r\n    if (n.isVisited === false) {\r\n      n.previousNode = s;\r\n      if (startDfs(g, n, end, path, reached, forMaze)) return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, graph, forMaze) {\r\n  var neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbors.push(graph[row - 1][col]);\r\n  if (col < graph[0].length - 1) neighbors.push(graph[row][col + 1]);\r\n  if (row < graph.length - 1) neighbors.push(graph[row + 1][col]);\r\n  if (col > 0) neighbors.push(graph[row][col - 1]);\r\n\r\n  neighbors.filter((neighbor) => !neighbor.isVisited);\r\n  return forMaze === true ? shuffle(neighbors) : neighbors;\r\n}\r\n\r\nexport function getNodesInShortestPathOrderDfs(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","import { dfs, getNodesInShortestPathOrderDfs } from \"./dfs\";\r\n// import { bfs, getNodesInShortestPathOrder } from \"./bfs\";\r\nconst NO_OF_ROW = 18;\r\nconst NO_OF_COL = 60;\r\n\r\nexport function maze(g1, g2, g3, g4) {\r\n  const allPaths = [];\r\n  var S_ROW, S_COL, F_ROW, F_COL, start, end;\r\n  // var i = 0;\r\n  const possibleCordinates = [];\r\n\r\n  S_ROW = getRndInteger(1, 7);\r\n  S_COL = getRndInteger(1, 15);\r\n  F_ROW = getRndInteger(12, 16);\r\n  F_COL = getRndInteger(40, 58);\r\n  possibleCordinates.push({\r\n    START_NODE_ROW: S_ROW,\r\n    START_NODE_COL: S_COL,\r\n    FINISH_NODE_ROW: F_ROW,\r\n    FINISH_NODE_COL: F_COL,\r\n  });\r\n  start = g1[S_ROW][S_COL];\r\n  end = g1[F_ROW][F_COL];\r\n  var t = dfs(g1, start, end, true);\r\n  var path = getNodesInShortestPathOrderDfs(end);\r\n  if (t.reached) allPaths.push(path);\r\n\r\n  S_ROW = getRndInteger(7, 13);\r\n  S_COL = getRndInteger(1, 18);\r\n  F_ROW = getRndInteger(2, 8);\r\n  F_COL = getRndInteger(40, 56);\r\n  possibleCordinates.push({\r\n    START_NODE_ROW: S_ROW,\r\n    START_NODE_COL: S_COL,\r\n    FINISH_NODE_ROW: F_ROW,\r\n    FINISH_NODE_COL: F_COL,\r\n  });\r\n  start = g2[S_ROW][S_COL];\r\n  end = g2[F_ROW][F_COL];\r\n\r\n  t = dfs(g2, start, end, true);\r\n  path = getNodesInShortestPathOrderDfs(end);\r\n  if (t.reached) allPaths.push(path);\r\n\r\n  // i = 0;\r\n\r\n  // S_ROW = getRndInteger(1 + i * 2, 7 + i * 2);\r\n  // S_COL = getRndInteger(1, 18);\r\n  // F_ROW = getRndInteger(10 + i * 2, 12 + i * 2);\r\n  // F_COL = getRndInteger(40, 57);\r\n  // possibleCordinates.push({\r\n  //   START_NODE_ROW: S_ROW,\r\n  //   START_NODE_COL: S_COL,\r\n  //   FINISH_NODE_ROW: F_ROW,\r\n  //   FINISH_NODE_COL: F_COL,\r\n  // });\r\n\r\n  // start = g3[S_ROW][S_COL];\r\n  // end = g3[F_ROW][F_COL];\r\n\r\n  // t = bfs(g3, start, end);\r\n  // path = getNodesInShortestPathOrder(end);\r\n  // if (t.reached) allPaths.push(path);\r\n  // i++;\r\n\r\n  // S_ROW = getRndInteger(1 + i * 2, 7 + i * 2);\r\n  // S_COL = getRndInteger(1, 17);\r\n  // F_ROW = getRndInteger(10 + i * 2, 12 + i * 2);\r\n  // F_COL = getRndInteger(40, 57);\r\n  // possibleCordinates.push({\r\n  //   START_NODE_ROW: S_ROW,\r\n  //   START_NODE_COL: S_COL,\r\n  //   FINISH_NODE_ROW: F_ROW,\r\n  //   FINISH_NODE_COL: F_COL,\r\n  // });\r\n  // start = g4[S_ROW][S_COL];\r\n  // end = g4[F_ROW][F_COL];\r\n  // t = bfs(g4, start, end);\r\n  // path = getNodesInShortestPathOrder(end);\r\n  // if (t.reached) allPaths.push(path);\r\n\r\n  const newCordinate =\r\n    possibleCordinates[getRndInteger(0, possibleCordinates.length - 1)];\r\n  return { allPaths, newCordinate };\r\n}\r\n\r\n///random walls\r\n\r\nfunction getRndInteger(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\nfunction checkStartOrEnd(r, col, c) {\r\n  if (\r\n    (r === c.START_NODE_ROW && col === c.START_NODE_COL) ||\r\n    (r === c.FINISH_NODE_ROW && col === c.FINISH_NODE_COL)\r\n  )\r\n    return true;\r\n  else return false;\r\n}\r\nexport function randWalls(gg, c) {\r\n  const g = gg.slice();\r\n  for (let i = 0; i < NO_OF_ROW; i++) {\r\n    // let l = NO_OF_COL * i;\r\n    // let r = l + NO_OF_COL - 1;\r\n    let walls = getRndInteger(13, 18);\r\n\r\n    for (let j = 0; j < walls; j++) {\r\n      var t = getRndInteger(0, NO_OF_COL - 1);\r\n\r\n      while (g[i][t].isWall === true || checkStartOrEnd(i, t, c)) {\r\n        t = getRndInteger(0, NO_OF_COL - 1);\r\n      }\r\n      g[i][t].isWall = true;\r\n    }\r\n  }\r\n  return g;\r\n}\r\n\r\n// Randomly select a node (or cell) N.\r\n// Push the node N onto a queue Q.\r\n// Mark the cell N as visited.\r\n// Randomly select an adjacent cell A of node N that has not been visited. If all the neighbors of N have been visited:\r\n// Continue to pop items off the queue Q until a node is encountered with at least one non-visited neighbor - assign this node to N and go to step 4.\r\n// If no nodes exist: stop.\r\n// Break the wall between N and A.\r\n// Assign the value A to N.\r\n// Go to step 2.\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport \"../css/home.css\";\r\nimport Node from \"./Node\";\r\nimport DNode from \"./DNode\";\r\nimport { VscGithub } from \"react-icons/vsc\";\r\n\r\nimport { bfs, getNodesInShortestPathOrder } from \"../algorithms/bfs\";\r\nimport { dfs, getNodesInShortestPathOrderDfs } from \"../algorithms/dfs\";\r\nimport { maze, randWalls } from \"../algorithms/maze\";\r\n\r\n// const G_START_NODE_ROW = 9;\r\n// const G_START_NODE_COL = 8;\r\n// const G_FINISH_NODE_ROW = 10;\r\n// const G_FINISH_NODE_COL = 45;\r\nconst NO_OF_ROW = 18;\r\nconst NO_OF_COL = 60;\r\n\r\nconst SPEEDS = [10, 5, 17];\r\n\r\nexport default function Home() {\r\n  //    states   //\r\n  const [graph, setGraph] = useState([]);\r\n  const [mousePressed, setmousePressed] = useState(false);\r\n  const [mousePressed2, setmousePressed2] = useState(false);\r\n  const [startSelected, setStartSelected] = useState(false);\r\n  const [endSelected, setEndSelected] = useState(false);\r\n  const [cordinates, setCordinates] = useState({\r\n    START_NODE_ROW: 8,\r\n    START_NODE_COL: 16,\r\n    FINISH_NODE_ROW: 8,\r\n    FINISH_NODE_COL: 45,\r\n  });\r\n  const [curAlgo, setCurAlgo] = useState(\"Select an Algorithm\");\r\n  const [curSpeed, setCurSpeed] = useState(0);\r\n  const [boardText, setBoardText] = useState(\r\n    \"<strong>pick an algorithm and start !</strong>\"\r\n  );\r\n  const [animationStarted, setAnimationStarted] = useState(false);\r\n\r\n  // var count = 0;\r\n\r\n  useEffect(() => {\r\n    // alert(\"hi\");\r\n    // const cur = graph\r\n    if (startSelected !== true || endSelected !== true) {\r\n      const g = createGraph(cordinates, graph);\r\n      setGraph(g);\r\n    }\r\n  }, [cordinates]);\r\n\r\n  //    animations   //\r\n  function animateShortestPath(shortestpath, reached, speed) {\r\n    if (!reached) {\r\n      setBoardText(\r\n        \"<strong>Path does not exists between Start node and Finish node</strong>\"\r\n      );\r\n      return;\r\n    }\r\n    setBoardText(\r\n      \"<strong>Path exists between Start node and Finish node</strong>\"\r\n    );\r\n    shortestpath.pop();\r\n    shortestpath.shift();\r\n    for (let i = 0; i < shortestpath.length; i++) {\r\n      setTimeout(() => {\r\n        const node = shortestpath[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-shortest-path\";\r\n      }, speed * i);\r\n    }\r\n  }\r\n  function visualize(visitedNodesInOrder, shortestpath, reached) {\r\n    var speed = SPEEDS[curSpeed];\r\n    setAnimationStarted(true);\r\n    // visitedNodesInOrder.pop();\r\n    visitedNodesInOrder.shift();\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          animateShortestPath(shortestpath, reached, speed);\r\n          setAnimationStarted(false);\r\n        }, speed * i);\r\n        return;\r\n      }\r\n      if (\r\n        visitedNodesInOrder[i].row === cordinates.FINISH_NODE_ROW &&\r\n        visitedNodesInOrder[i].col === cordinates.FINISH_NODE_COL\r\n      )\r\n        continue;\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-visited\";\r\n      }, speed * i);\r\n    }\r\n  }\r\n\r\n  //    alogorithms   //\r\n  function startBfs() {\r\n    setmousePressed(false);\r\n    setmousePressed2(false);\r\n\r\n    // const c = cordinates;\r\n    const start = graph[cordinates.START_NODE_ROW][cordinates.START_NODE_COL];\r\n    const end = graph[cordinates.FINISH_NODE_ROW][cordinates.FINISH_NODE_COL];\r\n    // console.log(cordinates);\r\n    const shortestpathInOrder = bfs(graph, start, end);\r\n    const startToEnd = getNodesInShortestPathOrder(end);\r\n    visualize(\r\n      shortestpathInOrder.path,\r\n      startToEnd,\r\n      shortestpathInOrder.reached\r\n    );\r\n  }\r\n\r\n  function startDfs() {\r\n    // const g = graph;\r\n    const start = graph[cordinates.START_NODE_ROW][cordinates.START_NODE_COL];\r\n    const end = graph[cordinates.FINISH_NODE_ROW][cordinates.FINISH_NODE_COL];\r\n    const shortestpathInOrder = dfs(graph, start, end, false);\r\n    const startToEnd = getNodesInShortestPathOrderDfs(end);\r\n    // console.log(shortestpathInOrder.path, shortestpathInOrder.reached);\r\n    visualize(\r\n      shortestpathInOrder.path,\r\n      startToEnd,\r\n      shortestpathInOrder.reached\r\n    );\r\n  }\r\n  function startAlgo() {\r\n    if (animationStarted) return;\r\n    if (curAlgo === \"BFS\") {\r\n      startBfs();\r\n    } else if (curAlgo === \"DFS\") {\r\n      startDfs();\r\n    } else {\r\n      setCurAlgo(\"Select an Algorithm\");\r\n    }\r\n  }\r\n\r\n  //    clear functions   //\r\n  function clearGraph() {\r\n    if (animationStarted) return;\r\n    // setmousePressed(false);\r\n    const div = document.getElementsByClassName(\"node node-visited\");\r\n    const div1 = document.getElementsByClassName(\"node node-shortest-path\");\r\n    const walls = document.getElementsByClassName(\"node node-wall\");\r\n\r\n    while (div.length) {\r\n      div[0].classList.remove(\"node-visited\");\r\n    }\r\n    while (div1.length) {\r\n      div1[0].classList.remove(\"node-shortest-path\");\r\n    }\r\n\r\n    while (walls.length) {\r\n      walls[0].classList.remove(\"node-wall\");\r\n    }\r\n    document.getElementById(\r\n      `node-${cordinates.START_NODE_ROW}-${cordinates.START_NODE_COL}`\r\n    ).className = \"node node-start\";\r\n    document.getElementById(\r\n      `node-${cordinates.FINISH_NODE_ROW}-${cordinates.FINISH_NODE_COL}`\r\n    ).className = \"node node-finish\";\r\n    // const c = c;\r\n    const g = createGraph(cordinates, []);\r\n    setGraph(g);\r\n  }\r\n  function clearPaths() {\r\n    if (animationStarted) return;\r\n    const visitedDiv = document.getElementsByClassName(\"node node-visited\");\r\n    const shortestDiv = document.getElementsByClassName(\r\n      \"node node-shortest-path\"\r\n    );\r\n    while (visitedDiv.length) {\r\n      visitedDiv[0].classList.remove(\"node-visited\");\r\n    }\r\n    while (shortestDiv.length) {\r\n      shortestDiv[0].classList.remove(\"node-shortest-path\");\r\n    }\r\n    document.getElementById(\r\n      `node-${cordinates.START_NODE_ROW}-${cordinates.START_NODE_COL}`\r\n    ).className = \"node node-start\";\r\n    document.getElementById(\r\n      `node-${cordinates.FINISH_NODE_ROW}-${cordinates.FINISH_NODE_COL}`\r\n    ).className = \"node node-finish\";\r\n\r\n    const g = createGraph(cordinates, graph);\r\n    setGraph(g);\r\n  }\r\n\r\n  //    walls/maze   //\r\n  function setWallBtn() {\r\n    if (animationStarted) return;\r\n    setmousePressed((v) => {\r\n      return !v;\r\n    });\r\n    setmousePressed2(false);\r\n    setStartSelected(false);\r\n    setEndSelected(false);\r\n  }\r\n\r\n  function toggleWall(g, row, col) {\r\n    const gg = g.slice();\r\n    const node = gg[row][col];\r\n    // console.log(node);\r\n    const newNode = {\r\n      ...node,\r\n      isWall: !node.isWall,\r\n    };\r\n    gg[row][col] = newNode;\r\n    return gg;\r\n  }\r\n  function randomWalls() {\r\n    if (animationStarted) return;\r\n    // console.log(\"rnad\");\r\n    clearPaths();\r\n    const empty = emptyGraph(cordinates);\r\n    const newG = randWalls(empty, cordinates);\r\n    const g = createGraph(cordinates, newG);\r\n    setGraph(g);\r\n  }\r\n  function createMaze() {\r\n    if (animationStarted) return;\r\n    clearPaths();\r\n    const e1 = emptyGraph(cordinates);\r\n    const e2 = emptyGraph(cordinates);\r\n    const e3 = emptyGraph(cordinates);\r\n    const e4 = emptyGraph(cordinates);\r\n    const { allPaths, newCordinate } = maze(e1, e2, e3, e4);\r\n    // console.log(allPaths);\r\n    var newGraph = emptyGraph(newCordinate);\r\n    // console.log(allPaths[0][0]);\r\n    for (let row = 0; row < NO_OF_ROW; row++) {\r\n      for (let col = 0; col < NO_OF_COL; col++) {\r\n        newGraph = toggleWall(newGraph, row, col);\r\n      }\r\n    }\r\n    var pathSet = new Set();\r\n    allPaths.forEach((path) => {\r\n      path.forEach((node) => {\r\n        pathSet.add(node);\r\n      });\r\n    });\r\n    pathSet = Array.from(pathSet);\r\n\r\n    pathSet.forEach((node) => {\r\n      if (\r\n        newGraph[node.row][node.col].isWall === true &&\r\n        node.row !== 0 &&\r\n        node.row !== 17 &&\r\n        node.col !== 0 &&\r\n        node.col !== 59\r\n      ) {\r\n        newGraph = toggleWall(newGraph, node.row, node.col);\r\n      }\r\n    });\r\n    // console.log(newCordinate);\r\n\r\n    setCordinates(newCordinate);\r\n    const g = createGraph(newCordinate, newGraph);\r\n    setGraph(g);\r\n  }\r\n\r\n  //    mouse functions  //\r\n  const drageStart = (e, position) => {\r\n    if (position.isStart) {\r\n      setEndSelected(false);\r\n      setStartSelected(true);\r\n    } else if (position.isFinish) {\r\n      setStartSelected(false);\r\n      setEndSelected(true);\r\n    } else e.preventDefault();\r\n    // setmousePressed(false);\r\n    // setmousePressed2(false);\r\n    // console.log(\"start\", cordinates);\r\n  };\r\n\r\n  const drageEnter = (e, position) => {\r\n    // console.log(position);\r\n    // if (mousePressed === true) return;\r\n    const r = parseInt(position.row);\r\n    const c = parseInt(position.col);\r\n    const ss = startSelected;\r\n    const ee = endSelected;\r\n\r\n    if (graph[r][c].isWall) return;\r\n    // console.log(\"enter\", cordinates);\r\n    if (ss) {\r\n      if (r === cordinates.FINISH_NODE_ROW && c === cordinates.FINISH_NODE_COL)\r\n        return;\r\n\r\n      setCordinates((cc) => {\r\n        return {\r\n          START_NODE_ROW: r,\r\n          START_NODE_COL: c,\r\n          FINISH_NODE_ROW: cc.FINISH_NODE_ROW,\r\n          FINISH_NODE_COL: cc.FINISH_NODE_COL,\r\n        };\r\n      });\r\n    }\r\n    if (ee) {\r\n      if (r === cordinates.START_NODE_ROW && c === cordinates.START_NODE_COL)\r\n        return;\r\n      setCordinates((cc) => {\r\n        return {\r\n          FINISH_NODE_ROW: r,\r\n          FINISH_NODE_COL: c,\r\n          START_NODE_ROW: cc.START_NODE_ROW,\r\n          START_NODE_COL: cc.START_NODE_COL,\r\n        };\r\n      });\r\n    }\r\n  };\r\n\r\n  const drageEnd = (e, position) => {\r\n    // if (mousePressed === true) return;\r\n\r\n    const r = parseInt(position.row);\r\n    const c = parseInt(position.col);\r\n    const ss = startSelected;\r\n    const ee = endSelected;\r\n\r\n    // const cord = cordinates;\r\n    if (graph[r][c].isWall) return;\r\n\r\n    if (ss) {\r\n      if (r === cordinates.FINISH_NODE_ROW && c === cordinates.FINISH_NODE_COL)\r\n        return;\r\n      document.getElementById(\r\n        `node-${cordinates.START_NODE_ROW}-${cordinates.START_NODE_COL}`\r\n      ).className = \"node\";\r\n      document.getElementById(`node-${r}-${c}`).className = \"node node-start\";\r\n      setCordinates((cc) => {\r\n        return {\r\n          START_NODE_ROW: r,\r\n          START_NODE_COL: c,\r\n          FINISH_NODE_ROW: cc.FINISH_NODE_ROW,\r\n          FINISH_NODE_COL: cc.FINISH_NODE_COL,\r\n        };\r\n      });\r\n    }\r\n    if (ee) {\r\n      if (r === cordinates.START_NODE_ROW && c === cordinates.START_NODE_COL)\r\n        return;\r\n      document.getElementById(\r\n        `node-${cordinates.FINISH_NODE_ROW}-${cordinates.FINISH_NODE_COL}`\r\n      ).className = \"node\";\r\n      document.getElementById(`node-${r}-${c}`).className = \"node node-finish\";\r\n      setCordinates((cc) => {\r\n        return {\r\n          FINISH_NODE_ROW: r,\r\n          FINISH_NODE_COL: c,\r\n          START_NODE_ROW: cc.START_NODE_ROW,\r\n          START_NODE_COL: cc.START_NODE_COL,\r\n        };\r\n      });\r\n    }\r\n\r\n    setStartSelected(false);\r\n    setEndSelected(false);\r\n    setmousePressed(false);\r\n    setmousePressed2(false);\r\n\r\n    // console.log(\"end\", cordinates);\r\n  };\r\n\r\n  function checkStartOrEnd(row, col) {\r\n    const c = cordinates;\r\n    if (\r\n      (row === c.START_NODE_ROW && col === c.START_NODE_COL) ||\r\n      (row === c.FINISH_NODE_ROW && col === c.FINISH_NODE_COL)\r\n    )\r\n      return true;\r\n    else return false;\r\n  }\r\n\r\n  function onMouseUp(row, col) {\r\n    // console.log(\"up\");\r\n    setmousePressed2(false);\r\n    // setRouterSelected(false);\r\n    // console.log(\"mouse up\");\r\n  }\r\n\r\n  function onMouseDown(row, col, e) {\r\n    const mouse = mousePressed;\r\n\r\n    if (mouse === false && checkStartOrEnd(row, col) === true) {\r\n      return;\r\n    }\r\n    if (row === cordinates.START_NODE_ROW && col === cordinates.START_NODE_COL)\r\n      return;\r\n    if (\r\n      row === cordinates.FINISH_NODE_ROW &&\r\n      col === cordinates.FINISH_NODE_COL\r\n    )\r\n      return;\r\n    // console.log(\"down\");\r\n\r\n    const g = graph;\r\n    if (mouse === false) return;\r\n    setmousePressed2(true);\r\n\r\n    const newGraph = toggleWall(g, row, col);\r\n    setGraph(newGraph);\r\n  }\r\n\r\n  function onMouseEnter(row, col) {\r\n    if (row === cordinates.START_NODE_ROW && col === cordinates.START_NODE_COL)\r\n      return;\r\n    if (\r\n      row === cordinates.FINISH_NODE_ROW &&\r\n      col === cordinates.FINISH_NODE_COL\r\n    )\r\n      return;\r\n    const pressAndHold2 = mousePressed2;\r\n    const pressAndHold = mousePressed;\r\n\r\n    if (checkStartOrEnd(row, col) === true && pressAndHold === false) {\r\n      return;\r\n    } else {\r\n      if (pressAndHold === false || pressAndHold2 === false) return;\r\n\r\n      // console.log(\"mouse enter\");\r\n\r\n      const g = graph;\r\n      const newGraph = toggleWall(g, row, col);\r\n      setGraph(newGraph);\r\n    }\r\n  }\r\n\r\n  function tutorial() {\r\n    document.getElementById(\"tutorialBoard\").style.display = \"block\";\r\n  }\r\n\r\n  function toggleTutorial() {\r\n    document.getElementById(\"tutorialBoard\").style.display = \"none\";\r\n  }\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <div className=\"header\">\r\n        <h2 onClick={(e) => tutorial()}>Pathfinding Visualizer</h2>\r\n\r\n        <div className=\"buttonWrap\">\r\n          <select\r\n            className=\"algoList\"\r\n            value={curAlgo}\r\n            onChange={(e) => {\r\n              if (e.target.value === \"BFS\") {\r\n                setBoardText(\r\n                  `<strong>Breath first search is(BFS) <i>unweighted </i>and <i>guarantee </i>shortest path</strong> `\r\n                );\r\n              } else if (e.target.value === \"DFS\") {\r\n                setBoardText(\r\n                  \"<strong>Depth first search(DFS) is <i>unweighted </i> and <i>does not guarantee</i> shortest path </>\"\r\n                );\r\n              } else {\r\n                setBoardText(\"<strong>pick an algorithm and start !</strong>\");\r\n              }\r\n              setCurAlgo(e.target.value);\r\n            }}\r\n          >\r\n            <option>Algorithm</option>\r\n            <option>BFS</option>\r\n            <option>DFS</option>\r\n          </select>\r\n\r\n          <button onClick={() => randomWalls()}>Random Walls</button>\r\n          <button onClick={() => createMaze()}>Maze</button>\r\n          <button onClick={() => startAlgo()}>Start</button>\r\n          <button onClick={() => setWallBtn()}>\r\n            Place Wall : {mousePressed ? \"on\" : \"off\"}\r\n          </button>\r\n          <button onClick={() => clearPaths()}>Clear Paths</button>\r\n          <button onClick={() => clearGraph()}>Clear Graph</button>\r\n          <select\r\n            className=\"speedList\"\r\n            value={\r\n              curSpeed === 0\r\n                ? \"normal\"\r\n                : curSpeed === 1\r\n                ? \"fast\"\r\n                : curSpeed === 2\r\n                ? \"slow\"\r\n                : \"normal\"\r\n            }\r\n            onChange={(e) =>\r\n              setCurSpeed((c) => {\r\n                return e.target.value === \"normal\"\r\n                  ? 0\r\n                  : e.target.value === \"fast\"\r\n                  ? 1\r\n                  : e.target.value === \"slow\"\r\n                  ? 2\r\n                  : 0;\r\n              })\r\n            }\r\n          >\r\n            <option>normal</option>\r\n            <option>slow</option>\r\n            <option>fast</option>\r\n          </select>\r\n        </div>\r\n        <div className=\"legends\">\r\n          <DNode\r\n            isFinish={false}\r\n            isStart={true}\r\n            isWall={false}\r\n            isVisited={false}\r\n            isShortest={false}\r\n            isUnvisited={false}\r\n            isTutorial={false}\r\n            onClick={tutorial}\r\n          ></DNode>\r\n          <DNode\r\n            isFinish={true}\r\n            isStart={false}\r\n            isWall={false}\r\n            isVisited={false}\r\n            isShortest={false}\r\n            isUnvisited={false}\r\n            isTutorial={false}\r\n            onClick={tutorial}\r\n          ></DNode>\r\n          <DNode\r\n            isFinish={false}\r\n            isStart={false}\r\n            isWall={true}\r\n            isVisited={false}\r\n            isShortest={false}\r\n            isUnvisited={false}\r\n            isTutorial={false}\r\n            onClick={tutorial}\r\n          ></DNode>\r\n          <DNode\r\n            isFinish={false}\r\n            isStart={false}\r\n            isWall={false}\r\n            isVisited={false}\r\n            isShortest={false}\r\n            isUnvisited={true}\r\n            isTutorial={false}\r\n            onClick={tutorial}\r\n          ></DNode>\r\n          <DNode\r\n            isFinish={false}\r\n            isStart={false}\r\n            isWall={false}\r\n            isVisited={true}\r\n            isShortest={false}\r\n            isUnvisited={false}\r\n            isTutorial={false}\r\n            onClick={tutorial}\r\n          ></DNode>\r\n          <DNode\r\n            isFinish={false}\r\n            isStart={false}\r\n            isWall={false}\r\n            isVisited={false}\r\n            isShortest={true}\r\n            isUnvisited={false}\r\n            isTutorial={false}\r\n            onClick={tutorial}\r\n          ></DNode>\r\n          <DNode\r\n            isFinish={false}\r\n            isStart={false}\r\n            isWall={false}\r\n            isVisited={false}\r\n            isShortest={false}\r\n            isUnvisited={false}\r\n            isTutorial={true}\r\n            onClick={tutorial}\r\n          ></DNode>\r\n        </div>\r\n        <div\r\n          className=\"board\"\r\n          dangerouslySetInnerHTML={{ __html: boardText }}\r\n        />\r\n      </div>\r\n      <div\r\n        id=\"g\"\r\n        className=\"graph\"\r\n        onDragOver={(e) => {\r\n          e.preventDefault();\r\n        }}\r\n        onDragEnter={(e) => e.preventDefault()}\r\n        draggable\r\n      >\r\n        {graph.map((row, rowIdx) => {\r\n          return (\r\n            <div key={rowIdx}>\r\n              {row.map((node, nodeIdx) => {\r\n                const { row, col, isFinish, isStart, distance, isWall } = node;\r\n\r\n                return (\r\n                  <Node\r\n                    key={nodeIdx}\r\n                    col={col}\r\n                    row={row}\r\n                    isFinish={isFinish}\r\n                    isStart={isStart}\r\n                    isWall={isWall}\r\n                    distance={distance}\r\n                    onMouseDown={onMouseDown}\r\n                    onMouseEnter={onMouseEnter}\r\n                    onMouseUp={onMouseUp}\r\n                    drageStart={drageStart}\r\n                    drageEnter={drageEnter}\r\n                    drageEnd={drageEnd}\r\n                  ></Node>\r\n                );\r\n              })}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      <div id=\"tutorialBoard\">\r\n        <div id=\"tutorialHeader\">\r\n          <a href=\"https://github.com/Prajwal-54V/pathFinder\" id=\"gitHubLink\">\r\n            <h3>Pathfinding Visualizer</h3>\r\n            <div id=\"githubSpan\">\r\n              Github\r\n              <VscGithub id=\"gitHubIcon\" />\r\n            </div>\r\n          </a>\r\n        </div>\r\n        <div id=\"tutorialPara\">\r\n          <h4>How does this work ?</h4> <br />\r\n          <ol>\r\n            <li>\r\n              <strong>Select Algorithm</strong> you want to visualize\r\n            </li>\r\n\r\n            <li>\r\n              To change position of <strong>start</strong> or\r\n              <strong> finish</strong> node,<strong>press and hold </strong>\r\n              existing start or finish node then\r\n              <strong> drag and move </strong> desired node on board\r\n            </li>\r\n            <li>\r\n              Start button to <strong>start animation</strong>\r\n            </li>\r\n          </ol>\r\n          <ul style={{ marginTop: \"30px\" }}>\r\n            <li>\r\n              <strong>Random walls :</strong> To fill board with walls in\r\n              <strong> random </strong>\r\n              position\r\n              <br />\r\n              note : path may or may not exist between start and finish ,since\r\n              walls are placed in random nodes.\r\n            </li>\r\n            <li>\r\n              <strong>Maze :</strong> Creates a maze around start and finish\r\n              node ,atleast one possible path exists between start and finish.\r\n            </li>\r\n            <li>\r\n              <strong>Clear Path :</strong> Removes all traversed node,shortest\r\n              path route from board\r\n              <strong> after animation </strong>is completed.\r\n            </li>\r\n            <li>\r\n              <strong>Clear Graph :</strong> Clears entire board including\r\n              Walls, Paths.\r\n            </li>\r\n            <li>\r\n              <strong>Place Wall : </strong>\r\n              Toggle button to place walls manualy, toggle place wall button\r\n              <strong> click on node </strong> to place walls and also you can\r\n              <strong> drag from one node to other node </strong>this add walls\r\n              between 2 nodes if walls already exists removes it\r\n            </li>\r\n            <li>\r\n              <strong>Speed :</strong> Select animation speed\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <button id=\"tutorialClose\" onClick={(e) => toggleTutorial()}>\r\n          close\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction createNode(col, row, c) {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === c.START_NODE_ROW && col === c.START_NODE_COL,\r\n    isFinish: row === c.FINISH_NODE_ROW && col === c.FINISH_NODE_COL,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n}\r\n\r\nfunction emptyGraph(c) {\r\n  const graph = [];\r\n\r\n  for (let row = 0; row < NO_OF_ROW; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < NO_OF_COL; col++) {\r\n      currentRow.push(createNode(col, row, c));\r\n    }\r\n    graph.push(currentRow);\r\n  }\r\n\r\n  // console.log(graph);\r\n  return graph;\r\n}\r\n\r\nfunction createGraph(c, g) {\r\n  // console.log(\"create\", c);\r\n\r\n  const graph = [];\r\n\r\n  for (let row = 0; row < NO_OF_ROW; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < NO_OF_COL; col++) {\r\n      var cur;\r\n      if (g.length !== 0 && g[row][col].isWall) {\r\n        cur = g[row][col];\r\n      } else cur = createNode(col, row, c);\r\n      currentRow.push(cur);\r\n    }\r\n    graph.push(currentRow);\r\n  }\r\n\r\n  // console.log(graph);\r\n  return graph;\r\n}\r\n","import React from \"react\";\nimport Home from \"./components/Home\";\n\nfunction App() {\n  return (\n    <div>\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}